#lang rhombus/static/and_meta

export:
  order_config

import:
  treelist_util open
  "util/json.rhm" open

def endings: [#'TheHollowKnight, #'SealedSiblings, #'DreamNoMore, #'EmbraceTheVoid]

fun order_entries(order :: List.of(Symbol)) :: List:
  for List (achievement: order):
    [achievement, achievement_autosplit(achievement)]

fun achievement_autosplit(achievement :: Symbol) :: String:
  match achievement
  | #'Protected: "Mask1"
  | #'Masked: "Mask4"
  | #'Blessed: "SalubrasBlessing"
  | #'Soulful: "Vessel1"
  | #'Worldsoul: "Vessel3"
  | #'Falsehood: "FalseKnight"
  | #'Strength: "FailedKnight"
  | #'TestOfResolve: "Hornet1"
  | #'ProofOfResolve: "Hornet2"
  | #'Illumination: "SoulMaster"
  | #'Mortality: "SoulTyrant"
  | #'Release: "BrokenVessel"
  | #'Peace: "LostKin"
  | #'Honour: "DungDefender"
  | #'Respect: "MantisLords"
  | #'Obsession: "Collector"
  | #'Rivalry: "ZoteKilled"
  | #'Attunement: "Essence600"
  | #'Awakening: "DreamNail2"
  | #'Ascension: "SeerDeparts"
  | #'Grubfriend: "Grub23"
  | #'Metamorphosis: "Grub46"
  | #'Purity: "NailsmithKilled"
  | #'HappyCouple: "HappyCouplePlayerDataEvent"
  | #'Solace: "FlowerRewardGiven" // TODO: test autosplit vs achievement
  | #'Execution: "TraitorLord"
  | #'Hope: "StagnestStation" // TODO: test autosplit vs achievement
  | #'Teacher: "Monomon"
  | #'Watcher: "Lurien"
  | #'Beast: "Hegemol"
  | #'Warrior: "ColosseumBronze"
  | #'Conqueror: "ColosseumSilver"
  | #'Fool: "ColosseumGold"
  | #'TheHollowKnight: "EndingSplit"
  | #'SealedSiblings: "EndingSplit"
  | #'DreamNoMore: "EndingSplit"
  | #'Void: "VoidHeart"
  | #'Speedrun1: "EndingSplit"
  | #'Speedrun2: "EndingSplit"
  | #'Completion: "EndingSplit"
  | #'SpeedCompletion: "EndingSplit"
  | #'SteelSoul: "EndingSplit"
  | #'SteelHeart: "EndingSplit"
  | #'TrueHunter: "HuntersMark"
  | #'PassingOfTheAge: "EndingSplit"
  | #'Memory: "WhiteDefender"
  | #'DarkRomance: "GreyPrince"
  | #'GrandPerformance: "TroupeMasterGrimm"
  | #'Ritual: "NightmareKingGrimm"
  | #'Banishment: "NightmareLanternDestroyed"
  | #'Brotherhood: "Pantheon1"
  | #'Inspiration:  "Pantheon2"
  | #'Focus: "Pantheon3"
  | #'SoulAndShade: "Pantheon4"
  | #'EmbraceTheVoid: "EndingSplit"
  | #'PureCompletion: "EndingSplit"
  | #'BenchAny: "BenchAny"
  | _: "ManualSplit"

fun entries_insert_bench(entries :: List) :: List:
  match entries
  | []: []
  | entries:
      let values(before, endings_after):
        List.splitf(entries, fun ([a, s]): s != "EndingSplit")
      let ending_a:
        for any ([a, s]: endings_after):
          break_when: s != "EndingSplit"
          keep_when: endings.contains(a)
          a
      let values(endings, after):
        List.splitf(
          endings_after,
          fun ([a, s]):
            s == "EndingSplit" && (a == ending_a || !endings.contains(a)))
      match after
      | []: before ++ endings
      | [[_, "EndingSplit"], & _]:
          before
            ++ endings
            ++ [[#'BenchAny, "BenchAny"]]
            ++ entries_insert_bench(after)
      | after:
          before
            ++ endings
            ++ entries_insert_bench(after)

module test:
  check:
    entries_insert_bench([[#'TheHollowKnight, "EndingSplit"],
                          [#'Speedrun1, "EndingSplit"],
                          [#'Speedrun2, "EndingSplit"],
                          [#'SealedSiblings, "EndingSplit"],
                          [#'PassingOfTheAge, "EndingSplit"],
                          [#'DreamNoMore, "EndingSplit"],
                          [#'Completion, "EndingSplit"],
                          [#'SpeedCompletion, "EndingSplit"]])
    ~is [[#'TheHollowKnight, "EndingSplit"],
         [#'Speedrun1, "EndingSplit"],
         [#'Speedrun2, "EndingSplit"],
         [#'BenchAny, "BenchAny"],
         [#'SealedSiblings, "EndingSplit"],
         [#'PassingOfTheAge, "EndingSplit"],
         [#'BenchAny, "BenchAny"],
         [#'DreamNoMore, "EndingSplit"],
         [#'Completion, "EndingSplit"],
         [#'SpeedCompletion, "EndingSplit"]]
  check:
    entries_insert_bench([[#'TheHollowKnight, "EndingSplit"],
                          [#'Speedrun1, "EndingSplit"],
                          [#'Speedrun2, "EndingSplit"],
                          [#'Void, "VoidHeart"],
                          [#'SealedSiblings, "EndingSplit"],
                          [#'PassingOfTheAge, "EndingSplit"],
                          [#'Grubfriend, "Grub23"],
                          [#'DreamNoMore, "EndingSplit"],
                          [#'Completion, "EndingSplit"],
                          [#'SpeedCompletion, "EndingSplit"]])
    ~is [[#'TheHollowKnight, "EndingSplit"],
         [#'Speedrun1, "EndingSplit"],
         [#'Speedrun2, "EndingSplit"],
         [#'Void, "VoidHeart"],
         [#'SealedSiblings, "EndingSplit"],
         [#'PassingOfTheAge, "EndingSplit"],
         [#'Grubfriend, "Grub23"],
         [#'DreamNoMore, "EndingSplit"],
         [#'Completion, "EndingSplit"],
         [#'SpeedCompletion, "EndingSplit"]]

fun order_config(order :: List.of(Symbol)):
  let entries1: order_entries(order)
  let names1:
    for values(names :: Map.of(String, List.of(String)): {}) ([v, k]: entries1):
      let ns :: List.of(String): names.get(k, [])
      let n:
        match k
        | "ManualSplit": @str{@v (@k)}
        | _: to_string(v)
      names ++ { k: ns.add(n) }
  let names2:
    for Map (k: names1.keys()):
      match names1[k]
      | [v]: values(k, v)
      | vs: values(k, vs)
  let splits2: entries_insert_bench(entries1).map(fun ([_, s]): s)
  {
    "gameName": "Hollow Knight",
    "categoryName": "All Achievements",
    "splitIds": splits2,
    "names": names2,
    "endTriggeringAutosplit": #true,
  }

